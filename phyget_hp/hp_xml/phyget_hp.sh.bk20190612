#!/bin/bash
#

echoUsage_cn () {
  cat << EOF
  =======================================
  ||||||||  浪潮物理机信息查询  |||||||||
  =======================================
  
  --------- 
  help info
  
  --物理机初始化设定查询--
  getsp) 查询节电模式
  getprocvt) 查询处理器虚拟化功能
  getprocthread) 查询处理器多线程功能
  getbootmode) 查询bios启动模式
  getbootseq) 查询bios启动顺序
  gettimezone) 查询时区
  getntp) 查询网络时间服务器信息
  getsnmp) 查询snmp设定信息
  getuser) 查询用户设定信息
  getstoragevdisk) 查询存储虚拟磁盘信息
  
  --物理机内部设备状态查询--
  getpwrsw) 是否开机
  getcpu) CPU状态
  getmem) 内存状态
  getinventory) 设备列表
  getnicb) 带外网卡状态
  getnics) 系统网卡状态
  getpsu) 电源状态
  getfan) 风扇状态
  getemp) 温度状态
  getvolt) 电压状态
  getutil) 使用率
  getstoragestatus) 查询存储汇总状态
  getstoragecontroller) 查询存储控制卡信息
  getstoragebattery) 查询存储电池信息
  getstoragepdisk) 查询存储物理磁盘信息
  
  --外--
  getall) 查询所有项
  quit) 退出
  ------------
EOF
}

# function start
getSavePower () {
  echo -n '  '
  perl locfg.pl -s $1 -u $User -p $Pass -f Get_Host_Power_Saver.xml | grep -A 1 GET_HOST_POWER_SAVER | grep -v 'GET_HOST_POWER_SAVER' | sed s/' '//g
}

getProcVT () {
  echo -n '  '
  echo 'still not found the item'
}

getProcThread () {
  snmpwalk $1 -v 2c -c HrpVe7 CPQSTDEQ-MIB::cpqSeCPUMultiThreadStatus | while read LINE; do
    if [[ $LINE =~ 'enabled' ]]; then
      echo "  CPU `echo $LINE | grep -o cpqSeCPUMultiThreadStatus.[0-9] | grep -o [0-9]` Hyper-Threading is On."
    else
      echo "  CPU `echo $LINE | grep -o cpqSeCPUMultiThreadStatus.[0-9] | grep -o [0-9]` Hyper-Threading is Off."
    fi
  done
}

getBootMode () {
  perl locfg.pl -s $1 -u $User -p $Pass -f GET_CURRENT_BOOT_MODE.xml | sed -n '/<GET_CURRENT_BOOT_MODE>/,/<\/GET_CURRENT_BOOT_MODE>/p' | sed '/GET_CURRENT_BOOT_MODE/d' | sed s/'  <'//g | sed 's/\/>//g'
}

getBootSeq () {
  i=1
  perl locfg.pl -s 10.4.0.62 -u administrator -p 'Ops45!pdt' -f GET_PERSISTENT_BOOT.xml |sed -n '/<PERSISTENT_BOOT>/,/<\/PERSISTENT_BOOT>/p' | sed '/PERSISTENT_BOOT/d' |sed 's@\/>@@g' | sed 's@    <@@g' | while read LINE; do
    if [ $i -le 3 ]; then
      echo '  '$i $LINE
      let i++
    fi
  done
}

getPsu () {
  echo -n '  '
  isrest -H $1 -U $User -P $Pass getPsu | egrep 'PsuCount|ID|Status' | xargs echo
}

getTimezone () {
  echo -n '  '
  perl locfg.pl -s $1 -u $User -p $Pass -f GET_NETWORK_SETTINGS.xml | grep TIME | sed -e 's/    <//g' -e 's/\/>//g'
}

getNtp () {
  echo -n '  '
  echo -n `perl locfg.pl -s $1 -u $User -p $Pass -f GET_NETWORK_SETTINGS.xml | egrep 'DHCP_SNTP|DHCPV6_SNTP' | sed -e 's/    <//g' -e 's/\/>//g'`
  echo 
  echo -n '  '
  echo -n `perl locfg.pl -s $1 -u $User -p $Pass -f GET_NETWORK_SETTINGS.xml | egrep 'SNTP_SERVER' | sed -e 's/    <//g' -e 's/\/>//g' `
  echo 
  echo -n '  '
  echo -n `perl locfg.pl -s $1 -u $User -p $Pass -f GET_GLOBAL_SETTINGS.xml | grep 'PROPAGATE' | sed -e 's/    <//g' -e 's/\/>//g'`
  echo 
}

getSnmp () {
  echo -n '  '
  echo -n `perl locfg.pl -s $1 -u $User -p $Pass -f GET_GLOBAL_SETTINGS.xml | grep SNMP_ACCESS_ENABLED | sed -e 's/    <//g' -e 's/\/>//g'`
  echo 
  echo -n '  '
  echo -n `perl locfg.pl -s $1 -u $User -p $Pass -f GET_SNMP_IM_SETTINGS.xml | egrep 'SNMP_ACCESS\>|1_ROCOMMUNITY\>' | sed -e 's/    <//g' -e 's/\/>//g'`
  echo 
}

getUser () {
  i=7
  perl locfg.pl -s $1 -u $User -p $Pass -f GET_USER.xml | grep -A 7 GET_USER | sed -e 's/    \<//g' -e '/GET_USER/d' | while read LINE; do
    echo '  '$LINE
    let i++
  done
}

getStorageStatus () {
  echo -n '  '
  echo "function invalid"
}

getStorageController () {
  echo -n '  '
  isrest -H $1 -U $User -P $Pass getController | egrep 'Product Name|^Vendor\(ID\)|Firmware Version|^Drive Count|^Virtual Drive Count' | xargs echo
}

getStorageBattery () {
  echo -n '  '
  echo "function invalid"
}

getStorageVdisk () {
  perl locfg.pl -s $1 -u $User -p $Pass -f GET_EMBEDDED_HEALTH_STORAGE.xml | grep '<LOGICAL_DRIVE>' -A 5 | sed -e '/--/d' -e '/<LOGICAL_DRIVE>/d' -e 's@/>@@g' | grep '\<.*\>' | awk -F '<' '{print $2}' | while read LINE; do
    echo '  '$LINE
  done
}

getStoragePdisk () {
  i=0
  isrest -H $1 -U $User -P $Pass getPhysicalDrive | egrep 'Product ID|Device ID|Coerced size \(GB\)|Media Error Count' | while read LINE; do
    if [[ $LINE =~ 'Device ID' ]]; then
      if [ $i -lt 10 ]; then
        echo -n '  '$LINE'  '
      else
        echo -n '  '$LINE' '
      fi
      let i+=1
    elif [[ ! $LINE =~ 'Product ID' ]]; then
      echo -n $LINE' '
    elif [[ $LINE =~ 'Product ID' ]]; then
     echo $LINE
    fi
   done
}

getPowerStatus () {
  echo -n '  '
  isrest -H $1 -U $User -P $Pass getPowerStatus | egrep 'P.*S.*' | xargs echo
}

getCPU () {
  echo -n '  '
  isrest -H $1 -U $User -P $Pass getCPU | egrep 'CPUCount|ID|Model|CPUStatus|TotalCores' | xargs echo
}

getMemory () {
  touch tmpfile01 tmpfile02
  isrest -H $1 -U $User -P $Pass getMemory | egrep 'MemCount|MemId|MemVendor|MemPresent|MemSize\(GB\)|MemType|MemStatus|MemFrequency\(MHZ\)' | tee tmpfile01 tmpfile02 &> /dev/null
  declare -i j=`cat tmpfile01 | egrep 'MemCount' | grep -o '[0-9]\{1,\}'`
  echo -n '  '
  cat tmpfile01 | grep 'MemCount' | xargs && sed -i '1d' tmpfile01 tmpfile02
  k=$j
  
  until [ $j -lt 1 ]; do
    stra=`head -7 tmpfile01 | xargs echo`
    if [[ $stra =~ 'MemPresent : Yes' ]]; then
      echo '  '$stra |awk '{printf "  %-6s%-2s%-4s%-10s%-2s%-8s%-11s%-2s%-5s%-11s%-2s%-4s%-8s%-2s%-6s%-10s%-2s%-4s%-18s%-2s%-3s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21}'
    fi
    sed -i '1,7d' tmpfile01
    let j-=1
  done
  until [ $k -lt 1 ]; do
    stra=`head -7 tmpfile02 | xargs echo`
    if [[ $stra =~ 'MemPresent : No' ]]; then
      echo '  '$stra |awk '{printf "  %-6s%-2s%-4s%-10s%-2s%-8s%-11s%-2s%-5s%-11s%-2s%-4s%-8s%-2s%-6s%-10s%-2s%-4s%-18s%-2s%-3s\n",$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$20,$21}'
    fi
    sed -i '1,7d' tmpfile02
    let k-=1
  done
  rm -f tmpfile01 tmpfile02
}

getPCIE () {
  isrest -H $1 -U $User -P $Pass getPCIE | egrep 'ID|PresentStatus|DeviceType|DeviceID|VendorID' | while read LINE; do
  if echo $LINE | grep '^\<ID\>' &> /dev/null; then
    echo -n '  '$LINE
  elif echo $LINE | grep '^\<VendorID\>' &> /dev/null; then
    echo ' '$LINE
  else
    echo -n ' '$LINE
  fi
  done
}

getNetworkAdapterB () {
  echo -n '  '
  isrest -H $1 -U $User -P $Pass getNetworkAdapter | egrep -v '-' | head -9 | while read LINE; do
  if [[ $LINE =~ 'BMCAdapterCount' ]]; then
    echo $LINE
  elif [[ $LINE =~ 'ID' ]]; then
    echo -n '  '$LINE
  elif [[ $LINE =~ 'IPAddress' ]]; then
    echo ' '$LINE
  else
    echo -n ' '$LINE
  fi
done
}


getNetworkAdapterS () {
  echo -n '  '
  declare -i j=0
  isrest -H $1 -U $User -P $Pass getNetworkAdapter | egrep -v '-' | sed '1,9d' | while read LINE; do
  if [[ $LINE =~ 'SYSAdapterCount' ]]; then
    echo $LINE
    continue
  elif [ $j -lt 6 ]; then
    if [[ $LINE =~ 'ID' ]]; then
      echo -n '  '$LINE
    elif [[ $LINE =~ 'MACAddress 1' ]]; then
      echo ' '$LINE
    else
      echo -n ' '$LINE
    fi
  elif [ $j -ge 6 ]; then
    if [[ $LINE =~ 'ID' ]]; then
      echo -n '  '$LINE
    elif [[ $LINE =~ 'MACAddress 3' ]]; then
      echo ' '$LINE
    else
      echo -n ' '$LINE
    fi
  fi
  let j+=1
done
}

getFan () {
  echo -n '  '
  declare -i j=0
  isrest -H $1 -U $User -P $Pass getFan | egrep 'FanCount|ID|Present|Status' | while read LINE; do
  if [[ $LINE =~ 'FanCount' ]]; then
    echo $LINE
  fi
  [ $j -eq 1 ] && echo -n '  '$LINE
  [ $j -ge 2 ] && [ $j -le 11 ] && echo -n ' '$LINE
  [ $j -eq 12 ] && echo ' '$LINE
  [ $j -eq 13 ] && echo -n '  '$LINE
  [ $j -ge 14 ] && [ $j -le 23 ] && echo -n ' '$LINE
  [ $j -eq 24 ] && echo ' '$LINE
  let j+=1
  done
}

getTemp () {
  declare -i j=1
  isrest -H $1 -U $User -P $Pass getSensor | egrep 'Temp' | awk '{print $1,$2}' | while read LINE; do
    echo -n '  ' && echo $LINE | awk '{printf "%-19s%-14s\n",$1,$2}' 
    let j+=1
  done
}

getVolt () {
  isrest -H $1 -U $User -P $Pass getSensor | egrep -v 'Temp|Hot' | egrep 'V' | while read LINE; do
    echo -n '  ' && echo $LINE | awk '{printf "%-19s%-14s\n",$1,$2}'
    let j+=1
  done
}

# function stop

User='admin'
Pass='Ops68!ppd'

cycle () {
  isrest=/opt/ISREST/ISREST-Linux-V1R1/bin/isrest
  iplst=`cat phyget_hp.ip`
  for i in $iplst; do
    echo "  $i"
    $1 $i
    echo
  done
}

cycleAll () {
  scrp=`basename $0`
  funlst=`sed -n '/^# function start.*/,/^# function stop.*/p' $scrp | grep 'get[A-Z].*()' | egrep -o '^get[A-Z].*[a-z]|^get[A-Z].*[A-Z]'`
  for i in $funlst; do
    echo '  '$i'----'
    cycle $i
  done 
}


echoUsage_cn
read -p "  快点，你的选择: " CHOICE
echo "     "

until [[ $CHOICE == 'quit' ]]; do
case $CHOICE in
  getsp)
    echo "  1.节电模式"
    cycle getSavePower
    ;;
  getprocvt)
    echo "  2.虚拟化"
    cycle getProcVT
    ;;
  getprocthread)
    echo "  3.多线程"
    cycle getProcThread 
    ;;
  getbootmode)
    echo "  4.启动模式"
    cycle getBootMode 
    ;;
  getbootseq)
    echo "  5.启动顺序"
    cycle getBootSeq 
    ;;
  getpsu)
    echo "  6.电源信息"
    cycle getPsu
    ;;
  gettimezone)
    echo "  7.时区"
    cycle getTimezone 
    ;;
  getntp)
    echo "  8.NTP"
    cycle getNtp 
    ;;
  getsnmp)
    echo "  9.SNMP"
    cycle getSnmp 
    ;;
  getuser)
    echo "  10.带外用户"
    cycle getUser 
    ;;
  getstoragestatus)
    echo "  11.存储汇总状态"
    cycle getStorageStatus 
    ;;
  getstoragecontroller)
    echo "  12.存储控制器"
    cycle getStorageController 
    ;;
  getstoragebattery)
    echo "  13.阵列卡电池"
    cycle getStorageBattery 
    ;;
  getstoragevdisk)
    echo "  14.虚拟磁盘"
    cycle getStorageVdisk 
    ;;
  getstoragepdisk)
    echo "  15.物理磁盘"
    cycle getStoragePdisk 
    ;;
  getpwrsw)
    echo "  16.是否开机"
    cycle getPowerStatus 
    ;;
  getcpu)
    echo "  17.CPU"
    cycle getCPU 
    ;;
  getmem)
    echo "  18.物理内存"
    cycle getMemory 
    ;;
  getinventory)
    echo "  19.设备列表"
    cycle getPCIE 
    ;;
  getnicb)
    echo "  20.带外网卡状态"
    cycle getNetworkAdapterB 
    ;;
  getnics)
    echo "  21.系统网卡状态"
    cycle getNetworkAdapterS 
    ;;
  getfan)
    echo "  22.风扇状态"
    cycle getFan 
    ;;
  getemp)
    echo "  23.温度状态"
    cycle getTemp 
    ;;
  getvolt)
    echo "  24.电压状态"
    cycle getVolt 
    ;;
  getall)
    echo "  25.查询所有项"
    cycleAll
    ;;
  *)
    echo "  未知选项"
    echo ""
    ;;
  esac
  echo "     "
  echoUsage_cn
  read -p "  快点，你的选择.: " CHOICE
  echo "     "
done
